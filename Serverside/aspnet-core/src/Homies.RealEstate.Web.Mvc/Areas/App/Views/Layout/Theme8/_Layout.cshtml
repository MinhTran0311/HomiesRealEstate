@using Abp.Web.Mvc.Alerts
@using Homies.RealEstate.Localization
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Components.AppActiveUserDelegationsCombobox
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Components.AppChatToggler
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Components.AppLanguageSwitch
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Components.AppLogo
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Components.AppMenu
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Components.AppQuickThemeSelect
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Components.AppRecentNotifications
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Components.AppSubscriptionBar
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Components.AppUserMenu
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Themes.Theme8.Components.AppTheme8Brand
@using Homies.RealEstate.Web.Areas.App.Views.Shared.Themes.Theme8.Components.AppTheme8Footer

@inject IAlertManager AlertManager

@{
    Layout = "~/Areas/App/Views/Layout/_Layout.cshtml";
}

@section Styles{
    <link rel="stylesheet" href="@(ApplicationPath)metronic/themes/theme8/css/style.bundle@(CultureHelper.IsRtl ? ".rtl" : "").css" asp-append-version="true"/>
    <link rel="stylesheet" abp-href="/Common/Styles/Themes/theme8/metronic-customize.css" asp-append-version="true"/>
    <link rel="stylesheet" abp-href="/fonts/fonts-asap-condensed.css" asp-append-version="true"/>
    @await RenderSectionAsync("Styles", false)
}

@section Scripts{
    <script abp-src="/metronic/themes/theme8/js/settings.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", false)
}

<div class="d-flex flex-column flex-root">
    <div class="d-flex flex-row flex-column-fluid page">
        <div class="d-flex flex-column flex-row-fluid wrapper" id="kt_wrapper">
            <div id="kt_header_mobile" class="header-mobile ">
                <a href="@Url.Action("Index", "Home", new {area = string.Empty})">
                    @await Component.InvokeAsync(typeof(AppLogoViewComponent), new {logoSkin = "dark"})
                </a>
                <div class="d-flex align-items-center">

                    <button class="btn p-0 burger-icon burger-icon-left ml-4" id="kt_header_mobile_toggle">
                        <span></span>
                    </button>

                    <button class="btn p-0 ml-2" id="kt_header_mobile_topbar_toggle">
                        <span class="svg-icon svg-icon-xl">
                            <!--begin::Svg Icon | path:/metronic/themes/metronic/theme/html/demo8/dist/assets/media/svg/icons/General/User.svg-->
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                    <polygon points="0 0 24 0 24 24 0 24"></polygon>
                                    <path d="M12,11 C9.790861,11 8,9.209139 8,7 C8,4.790861 9.790861,3 12,3 C14.209139,3 16,4.790861 16,7 C16,9.209139 14.209139,11 12,11 Z" fill="#000000" fill-rule="nonzero" opacity="0.3"></path>
                                    <path d="M3.00065168,20.1992055 C3.38825852,15.4265159 7.26191235,13 11.9833413,13 C16.7712164,13 20.7048837,15.2931929 20.9979143,20.2 C21.0095879,20.3954741 20.9979143,21 20.2466999,21 C16.541124,21 11.0347247,21 3.72750223,21 C3.47671215,21 2.97953825,20.45918 3.00065168,20.1992055 Z" fill="#000000" fill-rule="nonzero"></path>
                                </g>
                            </svg><!--end::Svg Icon-->
                        </span>
                    </button>
                </div>
                <!--end::Toolbar-->
            </div>
            <div id="kt_header" class="header  header-fixed ">
                <div class=" container ">
                    <div class="d-none d-lg-flex align-items-center mr-3">
                        @await Component.InvokeAsync(typeof(AppTheme8BrandViewComponent))
                    </div>
                    <div class="topbar topbar-minimize">
                        <div class="d-none d-lg-flex topbar-item subscription-warning d-print-none">
                            @await Component.InvokeAsync(typeof(AppSubscriptionBarViewComponent))
                        </div>
                        @await Component.InvokeAsync(typeof(AppActiveUserDelegationsComboboxViewComponent))
                        @await Component.InvokeAsync(typeof(AppQuickThemeSelectViewComponent), new {cssClass = "btn btn-icon btn-clean h-40px w-40px btn-dropdown"})
                        @await Component.InvokeAsync(typeof(AppLanguageSwitchViewComponent), new {cssClass = "btn btn-icon btn-clean h-40px w-40px btn-dropdown"})
                        @await Component.InvokeAsync(typeof(AppRecentNotificationsViewComponent), new {cssClass = "btn btn-icon btn-clean h-40px w-40px btn-dropdown"})
                        @await Component.InvokeAsync(typeof(AppChatTogglerViewComponent), new {cssClass = "btn btn-icon btn-clean h-40px w-40px btn-dropdown"})
                        @await Component.InvokeAsync(typeof(AppUserMenuViewComponent), new {togglerCssClass = "btn btn-icon w-auto h-40px btn-clean d-flex align-items-center btn-lg px-2", textCssClass = "text-dark-50 font-weight-bolder font-size-sm d-none d-md-inline mr-3", symbolCssClass = "symbol symbol-30 symbol-light-success", symbolTextCssClas = "symbol-label font-size-h5 font-weight-bold"})
                    </div>
                </div>
            </div>
            @await Component.InvokeAsync(typeof(AppMenuViewComponent), new {currentPageName = ViewBag.CurrentPageName, isLeftMenuUsed = false})
            <div class="d-flex flex-row flex-column-fluid @(await GetContainerClass())">
                <div class="main d-flex flex-column flex-row-fluid">
                    <div class="d-lg-none p-3 mobile-subscription-warning d-print-none">
                        @await Component.InvokeAsync(typeof(AppSubscriptionBarViewComponent))
                    </div>
                    @if (AlertManager.Alerts.Any())
                    {
                        <div id="AbpPageAlerts">
                            @foreach (var alertMessage in AlertManager.Alerts)
                            {
                                <div class="alert alert-@alertMessage.Type.ToString().ToLower()" role="alert">
                                    <div class="alert-text">
                                        <h4 class="alert-heading">
                                            @alertMessage.Title
                                            @if (alertMessage.Dismissible)
                                            {
                                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                            }
                                        </h4>
                                        <p>@alertMessage.Text</p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    @RenderBody()
                </div>
            </div>
            @await Component.InvokeAsync(typeof(AppTheme8FooterViewComponent))
        </div>
    </div>
</div>
