(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators'), require('rxjs/internal/observable/throwError')) :
    typeof define === 'function' && define.amd ? define('abp-ng2-module', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/operators', 'rxjs/internal/observable/throwError'], factory) :
    (global = global || self, factory(global['abp-ng2-module'] = {}, global.ng.core, global.ng.common.http, global.rxjs, global.rxjs.operators, global.rxjs['internal/observable/throwError']));
}(this, (function (exports, core, http, rxjs, operators, throwError) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var AbpModule = /** @class */ (function () {
        function AbpModule() {
        }
        AbpModule = __decorate([
            core.NgModule({
                declarations: [],
                imports: [],
                exports: []
            })
        ], AbpModule);
        return AbpModule;
    }());

    var TokenService = /** @class */ (function () {
        function TokenService() {
        }
        TokenService.prototype.getToken = function () {
            return abp.auth.getToken();
        };
        TokenService.prototype.getTokenCookieName = function () {
            return abp.auth.tokenCookieName;
        };
        TokenService.prototype.clearToken = function () {
            abp.auth.clearToken();
        };
        TokenService.prototype.setToken = function (authToken, expireDate) {
            abp.auth.setToken(authToken, expireDate);
        };
        //refresh token
        TokenService.prototype.getRefreshToken = function () {
            return abp.auth.getRefreshToken();
        };
        TokenService.prototype.getRefreshTokenCookieName = function () {
            return abp.auth.refreshTokenCookieName;
        };
        TokenService.prototype.clearRefreshToken = function () {
            abp.auth.clearRefreshToken();
        };
        TokenService.prototype.setRefreshToken = function (refreshToken, expireDate) {
            abp.auth.setRefreshToken(refreshToken, expireDate);
        };
        TokenService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function TokenService_Factory() { return new TokenService(); }, token: TokenService, providedIn: "root" });
        TokenService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], TokenService);
        return TokenService;
    }());

    var PermissionCheckerService = /** @class */ (function () {
        function PermissionCheckerService() {
        }
        PermissionCheckerService.prototype.isGranted = function (permissionName) {
            return abp.auth.isGranted(permissionName);
        };
        PermissionCheckerService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function PermissionCheckerService_Factory() { return new PermissionCheckerService(); }, token: PermissionCheckerService, providedIn: "root" });
        PermissionCheckerService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], PermissionCheckerService);
        return PermissionCheckerService;
    }());

    var FeatureCheckerService = /** @class */ (function () {
        function FeatureCheckerService() {
        }
        FeatureCheckerService.prototype.get = function (featureName) {
            return abp.features.get(featureName);
        };
        FeatureCheckerService.prototype.getValue = function (featureName) {
            return abp.features.getValue(featureName);
        };
        FeatureCheckerService.prototype.isEnabled = function (featureName) {
            return abp.features.isEnabled(featureName);
        };
        FeatureCheckerService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function FeatureCheckerService_Factory() { return new FeatureCheckerService(); }, token: FeatureCheckerService, providedIn: "root" });
        FeatureCheckerService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], FeatureCheckerService);
        return FeatureCheckerService;
    }());

    var LocalizationService = /** @class */ (function () {
        function LocalizationService() {
        }
        Object.defineProperty(LocalizationService.prototype, "languages", {
            get: function () {
                return abp.localization.languages;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LocalizationService.prototype, "currentLanguage", {
            get: function () {
                return abp.localization.currentLanguage;
            },
            enumerable: true,
            configurable: true
        });
        LocalizationService.prototype.localize = function (key, sourceName) {
            return abp.localization.localize(key, sourceName);
        };
        LocalizationService.prototype.getSource = function (sourceName) {
            return abp.localization.getSource(sourceName);
        };
        LocalizationService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function LocalizationService_Factory() { return new LocalizationService(); }, token: LocalizationService, providedIn: "root" });
        LocalizationService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], LocalizationService);
        return LocalizationService;
    }());

    var LogService = /** @class */ (function () {
        function LogService() {
        }
        LogService.prototype.debug = function (logObject) {
            abp.log.debug(logObject);
        };
        LogService.prototype.info = function (logObject) {
            abp.log.info(logObject);
        };
        LogService.prototype.warn = function (logObject) {
            abp.log.warn(logObject);
        };
        LogService.prototype.error = function (logObject) {
            abp.log.error(logObject);
        };
        LogService.prototype.fatal = function (logObject) {
            abp.log.fatal(logObject);
        };
        LogService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function LogService_Factory() { return new LogService(); }, token: LogService, providedIn: "root" });
        LogService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], LogService);
        return LogService;
    }());

    var MessageService = /** @class */ (function () {
        function MessageService() {
        }
        MessageService.prototype.info = function (message, title, options) {
            return abp.message.info(message, title, options);
        };
        MessageService.prototype.success = function (message, title, options) {
            return abp.message.success(message, title, options);
        };
        MessageService.prototype.warn = function (message, title, options) {
            return abp.message.warn(message, title, options);
        };
        MessageService.prototype.error = function (message, title, options) {
            return abp.message.error(message, title, options);
        };
        MessageService.prototype.confirm = function (message, title, callback, options) {
            return abp.message.confirm(message, title, callback, options);
        };
        MessageService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function MessageService_Factory() { return new MessageService(); }, token: MessageService, providedIn: "root" });
        MessageService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], MessageService);
        return MessageService;
    }());

    var AbpMultiTenancyService = /** @class */ (function () {
        function AbpMultiTenancyService() {
        }
        Object.defineProperty(AbpMultiTenancyService.prototype, "isEnabled", {
            get: function () {
                return abp.multiTenancy.isEnabled;
            },
            enumerable: true,
            configurable: true
        });
        AbpMultiTenancyService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function AbpMultiTenancyService_Factory() { return new AbpMultiTenancyService(); }, token: AbpMultiTenancyService, providedIn: "root" });
        AbpMultiTenancyService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], AbpMultiTenancyService);
        return AbpMultiTenancyService;
    }());

    var NotifyService = /** @class */ (function () {
        function NotifyService() {
        }
        NotifyService.prototype.info = function (message, title, options) {
            abp.notify.info(message, title, options);
        };
        NotifyService.prototype.success = function (message, title, options) {
            abp.notify.success(message, title, options);
        };
        NotifyService.prototype.warn = function (message, title, options) {
            abp.notify.warn(message, title, options);
        };
        NotifyService.prototype.error = function (message, title, options) {
            abp.notify.error(message, title, options);
        };
        NotifyService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function NotifyService_Factory() { return new NotifyService(); }, token: NotifyService, providedIn: "root" });
        NotifyService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], NotifyService);
        return NotifyService;
    }());

    var AbpSessionService = /** @class */ (function () {
        function AbpSessionService() {
        }
        Object.defineProperty(AbpSessionService.prototype, "userId", {
            get: function () {
                return abp.session.userId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbpSessionService.prototype, "tenantId", {
            get: function () {
                return abp.session.tenantId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbpSessionService.prototype, "impersonatorUserId", {
            get: function () {
                return abp.session.impersonatorUserId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbpSessionService.prototype, "impersonatorTenantId", {
            get: function () {
                return abp.session.impersonatorTenantId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbpSessionService.prototype, "multiTenancySide", {
            get: function () {
                return abp.session.multiTenancySide;
            },
            enumerable: true,
            configurable: true
        });
        AbpSessionService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function AbpSessionService_Factory() { return new AbpSessionService(); }, token: AbpSessionService, providedIn: "root" });
        AbpSessionService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], AbpSessionService);
        return AbpSessionService;
    }());

    var SettingService = /** @class */ (function () {
        function SettingService() {
        }
        SettingService.prototype.get = function (name) {
            return abp.setting.get(name);
        };
        SettingService.prototype.getBoolean = function (name) {
            return abp.setting.getBoolean(name);
        };
        SettingService.prototype.getInt = function (name) {
            return abp.setting.getInt(name);
        };
        SettingService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function SettingService_Factory() { return new SettingService(); }, token: SettingService, providedIn: "root" });
        SettingService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], SettingService);
        return SettingService;
    }());

    var UtilsService = /** @class */ (function () {
        function UtilsService() {
        }
        UtilsService.prototype.getCookieValue = function (key) {
            return abp.utils.getCookieValue(key);
        };
        UtilsService.prototype.setCookieValue = function (key, value, expireDate, path, domain, attributes) {
            abp.utils.setCookieValue(key, value, expireDate, path, domain, attributes);
        };
        UtilsService.prototype.deleteCookie = function (key, path) {
            abp.utils.deleteCookie(key, path);
        };
        UtilsService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function UtilsService_Factory() { return new UtilsService(); }, token: UtilsService, providedIn: "root" });
        UtilsService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], UtilsService);
        return UtilsService;
    }());

    var AbpUserConfigurationService = /** @class */ (function () {
        function AbpUserConfigurationService(_http) {
            this._http = _http;
        }
        AbpUserConfigurationService.prototype.initialize = function () {
            this._http.get('/AbpUserConfiguration/GetAll')
                .subscribe(function (result) {
                jQuery.extend(true, abp, JSON.parse(JSON.stringify(result)));
            });
        };
        AbpUserConfigurationService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        AbpUserConfigurationService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function AbpUserConfigurationService_Factory() { return new AbpUserConfigurationService(core["ɵɵinject"](http.HttpClient)); }, token: AbpUserConfigurationService, providedIn: "root" });
        AbpUserConfigurationService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], AbpUserConfigurationService);
        return AbpUserConfigurationService;
    }());

    var AbpHttpConfigurationService = /** @class */ (function () {
        function AbpHttpConfigurationService(_messageService, _logService) {
            this._messageService = _messageService;
            this._logService = _logService;
            this.defaultError = {
                message: 'An error has occurred!',
                details: 'Error details were not sent by server.'
            };
            this.defaultError401 = {
                message: 'You are not authenticated!',
                details: 'You should be authenticated (sign in) in order to perform this operation.'
            };
            this.defaultError403 = {
                message: 'You are not authorized!',
                details: 'You are not allowed to perform this operation.'
            };
            this.defaultError404 = {
                message: 'Resource not found!',
                details: 'The resource requested could not be found on the server.'
            };
        }
        AbpHttpConfigurationService.prototype.logError = function (error) {
            this._logService.error(error);
        };
        AbpHttpConfigurationService.prototype.showError = function (error) {
            if (error.details) {
                return this._messageService.error(error.details, error.message || this.defaultError.message);
            }
            else {
                return this._messageService.error(error.message || this.defaultError.message);
            }
        };
        AbpHttpConfigurationService.prototype.handleTargetUrl = function (targetUrl) {
            if (!targetUrl) {
                location.href = '/';
            }
            else {
                location.href = targetUrl;
            }
        };
        AbpHttpConfigurationService.prototype.handleUnAuthorizedRequest = function (messagePromise, targetUrl) {
            var _this = this;
            var self = this;
            if (messagePromise) {
                messagePromise.done(function () {
                    _this.handleTargetUrl(targetUrl || '/');
                });
            }
            else {
                self.handleTargetUrl(targetUrl || '/');
            }
        };
        AbpHttpConfigurationService.prototype.handleNonAbpErrorResponse = function (response) {
            var self = this;
            switch (response.status) {
                case 401:
                    self.handleUnAuthorizedRequest(self.showError(self.defaultError401), '/');
                    break;
                case 403:
                    self.showError(self.defaultError403);
                    break;
                case 404:
                    self.showError(self.defaultError404);
                    break;
                default:
                    self.showError(self.defaultError);
                    break;
            }
        };
        AbpHttpConfigurationService.prototype.handleAbpResponse = function (response, ajaxResponse) {
            var newResponse;
            if (ajaxResponse.success) {
                newResponse = response.clone({
                    body: ajaxResponse.result
                });
                if (ajaxResponse.targetUrl) {
                    this.handleTargetUrl(ajaxResponse.targetUrl);
                    ;
                }
            }
            else {
                newResponse = response.clone({
                    body: ajaxResponse.result
                });
                if (!ajaxResponse.error) {
                    ajaxResponse.error = this.defaultError;
                }
                this.logError(ajaxResponse.error);
                this.showError(ajaxResponse.error);
                if (response.status === 401) {
                    this.handleUnAuthorizedRequest(null, ajaxResponse.targetUrl);
                }
            }
            return newResponse;
        };
        AbpHttpConfigurationService.prototype.getAbpAjaxResponseOrNull = function (response) {
            if (!response || !response.headers) {
                return null;
            }
            var contentType = response.headers.get('Content-Type');
            if (!contentType) {
                this._logService.warn('Content-Type is not sent!');
                return null;
            }
            if (contentType.indexOf("application/json") < 0) {
                this._logService.warn('Content-Type is not application/json: ' + contentType);
                return null;
            }
            var responseObj = JSON.parse(JSON.stringify(response.body));
            if (!responseObj.__abp) {
                return null;
            }
            return responseObj;
        };
        AbpHttpConfigurationService.prototype.handleResponse = function (response) {
            var ajaxResponse = this.getAbpAjaxResponseOrNull(response);
            if (ajaxResponse == null) {
                return response;
            }
            return this.handleAbpResponse(response, ajaxResponse);
        };
        AbpHttpConfigurationService.prototype.blobToText = function (blob) {
            return new rxjs.Observable(function (observer) {
                if (!blob) {
                    observer.next("");
                    observer.complete();
                }
                else {
                    var reader = new FileReader();
                    reader.onload = function () {
                        observer.next(this.result);
                        observer.complete();
                    };
                    reader.readAsText(blob);
                }
            });
        };
        AbpHttpConfigurationService.ctorParameters = function () { return [
            { type: MessageService },
            { type: LogService }
        ]; };
        AbpHttpConfigurationService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function AbpHttpConfigurationService_Factory() { return new AbpHttpConfigurationService(core["ɵɵinject"](MessageService), core["ɵɵinject"](LogService)); }, token: AbpHttpConfigurationService, providedIn: "root" });
        AbpHttpConfigurationService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], AbpHttpConfigurationService);
        return AbpHttpConfigurationService;
    }());

    var RefreshTokenService = /** @class */ (function () {
        function RefreshTokenService() {
        }
        RefreshTokenService = __decorate([
            core.Injectable()
        ], RefreshTokenService);
        return RefreshTokenService;
    }());

    var AbpHttpInterceptor = /** @class */ (function () {
        function AbpHttpInterceptor(configuration, _injector) {
            this._injector = _injector;
            this._tokenService = new TokenService();
            this._utilsService = new UtilsService();
            this._logService = new LogService();
            this.isRefreshing = false;
            this.refreshTokenSubject = new rxjs.BehaviorSubject(null);
            this.configuration = configuration;
        }
        AbpHttpInterceptor.prototype.intercept = function (request, next) {
            var _this = this;
            var modifiedRequest = this.normalizeRequestHeaders(request);
            return next.handle(modifiedRequest)
                .pipe(operators.catchError(function (error) {
                if (error instanceof http.HttpErrorResponse && error.status === 401) {
                    return _this.tryAuthWithRefreshToken(request, next, error);
                }
                else {
                    return _this.handleErrorResponse(error);
                }
            }), operators.switchMap(function (event) {
                return _this.handleSuccessResponse(event);
            }));
        };
        AbpHttpInterceptor.prototype.tryGetRefreshTokenService = function () {
            var _refreshTokenService = this._injector.get(RefreshTokenService, null);
            if (_refreshTokenService) {
                return _refreshTokenService.tryAuthWithRefreshToken();
            }
            return rxjs.of(false);
        };
        AbpHttpInterceptor.prototype.tryAuthWithRefreshToken = function (request, next, error) {
            var _this = this;
            if (!this.isRefreshing) {
                this.isRefreshing = true;
                this.refreshTokenSubject.next(null);
                return this.tryGetRefreshTokenService().pipe(operators.switchMap(function (authResult) {
                    _this.isRefreshing = false;
                    if (authResult) {
                        _this.refreshTokenSubject.next(authResult);
                        var modifiedRequest = _this.normalizeRequestHeaders(request);
                        return next.handle(modifiedRequest);
                    }
                    else {
                        return _this.handleErrorResponse(error);
                    }
                }));
            }
            else {
                return this.refreshTokenSubject.pipe(operators.filter(function (authResult) { return authResult != null; }), operators.take(1), operators.switchMap(function (authResult) {
                    var modifiedRequest = _this.normalizeRequestHeaders(request);
                    return next.handle(modifiedRequest);
                }));
            }
        };
        AbpHttpInterceptor.prototype.normalizeRequestHeaders = function (request) {
            var modifiedHeaders = new http.HttpHeaders();
            modifiedHeaders = request.headers.set("Pragma", "no-cache")
                .set("Cache-Control", "no-cache")
                .set("Expires", "Sat, 01 Jan 2000 00:00:00 GMT");
            modifiedHeaders = this.addXRequestedWithHeader(modifiedHeaders);
            modifiedHeaders = this.addAuthorizationHeaders(modifiedHeaders);
            modifiedHeaders = this.addAspNetCoreCultureHeader(modifiedHeaders);
            modifiedHeaders = this.addAcceptLanguageHeader(modifiedHeaders);
            modifiedHeaders = this.addTenantIdHeader(modifiedHeaders);
            return request.clone({
                headers: modifiedHeaders
            });
        };
        AbpHttpInterceptor.prototype.addXRequestedWithHeader = function (headers) {
            if (headers) {
                headers = headers.set('X-Requested-With', 'XMLHttpRequest');
            }
            return headers;
        };
        AbpHttpInterceptor.prototype.addAspNetCoreCultureHeader = function (headers) {
            var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
            if (cookieLangValue && headers && !headers.has('.AspNetCore.Culture')) {
                headers = headers.set('.AspNetCore.Culture', cookieLangValue);
            }
            return headers;
        };
        AbpHttpInterceptor.prototype.addAcceptLanguageHeader = function (headers) {
            var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
            if (cookieLangValue && headers && !headers.has('Accept-Language')) {
                headers = headers.set('Accept-Language', cookieLangValue);
            }
            return headers;
        };
        AbpHttpInterceptor.prototype.addTenantIdHeader = function (headers) {
            var cookieTenantIdValue = this._utilsService.getCookieValue(abp.multiTenancy.tenantIdCookieName);
            if (cookieTenantIdValue && headers && !headers.has(abp.multiTenancy.tenantIdCookieName)) {
                headers = headers.set(abp.multiTenancy.tenantIdCookieName, cookieTenantIdValue);
            }
            return headers;
        };
        AbpHttpInterceptor.prototype.addAuthorizationHeaders = function (headers) {
            var authorizationHeaders = headers ? headers.getAll('Authorization') : null;
            if (!authorizationHeaders) {
                authorizationHeaders = [];
            }
            if (!this.itemExists(authorizationHeaders, function (item) { return item.indexOf('Bearer ') == 0; })) {
                var token = this._tokenService.getToken();
                if (headers && token) {
                    headers = headers.set('Authorization', 'Bearer ' + token);
                }
            }
            return headers;
        };
        AbpHttpInterceptor.prototype.handleSuccessResponse = function (event) {
            var self = this;
            if (event instanceof http.HttpResponse) {
                if (event.body instanceof Blob && event.body.type && event.body.type.indexOf("application/json") >= 0) {
                    return self.configuration.blobToText(event.body).pipe(operators.map(function (json) {
                        var responseBody = json == "null" ? {} : JSON.parse(json);
                        var modifiedResponse = self.configuration.handleResponse(event.clone({
                            body: responseBody
                        }));
                        return modifiedResponse.clone({
                            body: new Blob([JSON.stringify(modifiedResponse.body)], { type: 'application/json' })
                        });
                    }));
                }
            }
            return rxjs.of(event);
        };
        AbpHttpInterceptor.prototype.handleErrorResponse = function (error) {
            var _this = this;
            if (!(error.error instanceof Blob)) {
                return throwError.throwError(error);
            }
            return this.configuration.blobToText(error.error).pipe(operators.switchMap(function (json) {
                var errorBody = (json == "" || json == "null") ? {} : JSON.parse(json);
                var errorResponse = new http.HttpResponse({
                    headers: error.headers,
                    status: error.status,
                    body: errorBody
                });
                var ajaxResponse = _this.configuration.getAbpAjaxResponseOrNull(errorResponse);
                if (ajaxResponse != null) {
                    _this.configuration.handleAbpResponse(errorResponse, ajaxResponse);
                }
                else {
                    _this.configuration.handleNonAbpErrorResponse(errorResponse);
                }
                return throwError.throwError(error);
            }));
        };
        AbpHttpInterceptor.prototype.itemExists = function (items, predicate) {
            for (var i = 0; i < items.length; i++) {
                if (predicate(items[i])) {
                    return true;
                }
            }
            return false;
        };
        AbpHttpInterceptor.ctorParameters = function () { return [
            { type: AbpHttpConfigurationService },
            { type: core.Injector }
        ]; };
        AbpHttpInterceptor = __decorate([
            core.Injectable()
        ], AbpHttpInterceptor);
        return AbpHttpInterceptor;
    }());

    exports.AbpHttpConfigurationService = AbpHttpConfigurationService;
    exports.AbpHttpInterceptor = AbpHttpInterceptor;
    exports.AbpModule = AbpModule;
    exports.AbpMultiTenancyService = AbpMultiTenancyService;
    exports.AbpSessionService = AbpSessionService;
    exports.AbpUserConfigurationService = AbpUserConfigurationService;
    exports.FeatureCheckerService = FeatureCheckerService;
    exports.LocalizationService = LocalizationService;
    exports.LogService = LogService;
    exports.MessageService = MessageService;
    exports.NotifyService = NotifyService;
    exports.PermissionCheckerService = PermissionCheckerService;
    exports.RefreshTokenService = RefreshTokenService;
    exports.SettingService = SettingService;
    exports.TokenService = TokenService;
    exports.UtilsService = UtilsService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=abp-ng2-module.umd.js.map
