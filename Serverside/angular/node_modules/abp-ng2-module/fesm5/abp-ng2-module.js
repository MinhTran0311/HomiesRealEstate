import { __decorate } from 'tslib';
import { NgModule, ɵɵdefineInjectable, Injectable, ɵɵinject, Injector } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable, BehaviorSubject, of } from 'rxjs';
import { catchError, switchMap, filter, take, map } from 'rxjs/operators';
import { throwError } from 'rxjs/internal/observable/throwError';

var AbpModule = /** @class */ (function () {
    function AbpModule() {
    }
    AbpModule = __decorate([
        NgModule({
            declarations: [],
            imports: [],
            exports: []
        })
    ], AbpModule);
    return AbpModule;
}());

var TokenService = /** @class */ (function () {
    function TokenService() {
    }
    TokenService.prototype.getToken = function () {
        return abp.auth.getToken();
    };
    TokenService.prototype.getTokenCookieName = function () {
        return abp.auth.tokenCookieName;
    };
    TokenService.prototype.clearToken = function () {
        abp.auth.clearToken();
    };
    TokenService.prototype.setToken = function (authToken, expireDate) {
        abp.auth.setToken(authToken, expireDate);
    };
    //refresh token
    TokenService.prototype.getRefreshToken = function () {
        return abp.auth.getRefreshToken();
    };
    TokenService.prototype.getRefreshTokenCookieName = function () {
        return abp.auth.refreshTokenCookieName;
    };
    TokenService.prototype.clearRefreshToken = function () {
        abp.auth.clearRefreshToken();
    };
    TokenService.prototype.setRefreshToken = function (refreshToken, expireDate) {
        abp.auth.setRefreshToken(refreshToken, expireDate);
    };
    TokenService.ɵprov = ɵɵdefineInjectable({ factory: function TokenService_Factory() { return new TokenService(); }, token: TokenService, providedIn: "root" });
    TokenService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], TokenService);
    return TokenService;
}());

var PermissionCheckerService = /** @class */ (function () {
    function PermissionCheckerService() {
    }
    PermissionCheckerService.prototype.isGranted = function (permissionName) {
        return abp.auth.isGranted(permissionName);
    };
    PermissionCheckerService.ɵprov = ɵɵdefineInjectable({ factory: function PermissionCheckerService_Factory() { return new PermissionCheckerService(); }, token: PermissionCheckerService, providedIn: "root" });
    PermissionCheckerService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], PermissionCheckerService);
    return PermissionCheckerService;
}());

var FeatureCheckerService = /** @class */ (function () {
    function FeatureCheckerService() {
    }
    FeatureCheckerService.prototype.get = function (featureName) {
        return abp.features.get(featureName);
    };
    FeatureCheckerService.prototype.getValue = function (featureName) {
        return abp.features.getValue(featureName);
    };
    FeatureCheckerService.prototype.isEnabled = function (featureName) {
        return abp.features.isEnabled(featureName);
    };
    FeatureCheckerService.ɵprov = ɵɵdefineInjectable({ factory: function FeatureCheckerService_Factory() { return new FeatureCheckerService(); }, token: FeatureCheckerService, providedIn: "root" });
    FeatureCheckerService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], FeatureCheckerService);
    return FeatureCheckerService;
}());

var LocalizationService = /** @class */ (function () {
    function LocalizationService() {
    }
    Object.defineProperty(LocalizationService.prototype, "languages", {
        get: function () {
            return abp.localization.languages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LocalizationService.prototype, "currentLanguage", {
        get: function () {
            return abp.localization.currentLanguage;
        },
        enumerable: true,
        configurable: true
    });
    LocalizationService.prototype.localize = function (key, sourceName) {
        return abp.localization.localize(key, sourceName);
    };
    LocalizationService.prototype.getSource = function (sourceName) {
        return abp.localization.getSource(sourceName);
    };
    LocalizationService.ɵprov = ɵɵdefineInjectable({ factory: function LocalizationService_Factory() { return new LocalizationService(); }, token: LocalizationService, providedIn: "root" });
    LocalizationService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], LocalizationService);
    return LocalizationService;
}());

var LogService = /** @class */ (function () {
    function LogService() {
    }
    LogService.prototype.debug = function (logObject) {
        abp.log.debug(logObject);
    };
    LogService.prototype.info = function (logObject) {
        abp.log.info(logObject);
    };
    LogService.prototype.warn = function (logObject) {
        abp.log.warn(logObject);
    };
    LogService.prototype.error = function (logObject) {
        abp.log.error(logObject);
    };
    LogService.prototype.fatal = function (logObject) {
        abp.log.fatal(logObject);
    };
    LogService.ɵprov = ɵɵdefineInjectable({ factory: function LogService_Factory() { return new LogService(); }, token: LogService, providedIn: "root" });
    LogService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], LogService);
    return LogService;
}());

var MessageService = /** @class */ (function () {
    function MessageService() {
    }
    MessageService.prototype.info = function (message, title, options) {
        return abp.message.info(message, title, options);
    };
    MessageService.prototype.success = function (message, title, options) {
        return abp.message.success(message, title, options);
    };
    MessageService.prototype.warn = function (message, title, options) {
        return abp.message.warn(message, title, options);
    };
    MessageService.prototype.error = function (message, title, options) {
        return abp.message.error(message, title, options);
    };
    MessageService.prototype.confirm = function (message, title, callback, options) {
        return abp.message.confirm(message, title, callback, options);
    };
    MessageService.ɵprov = ɵɵdefineInjectable({ factory: function MessageService_Factory() { return new MessageService(); }, token: MessageService, providedIn: "root" });
    MessageService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], MessageService);
    return MessageService;
}());

var AbpMultiTenancyService = /** @class */ (function () {
    function AbpMultiTenancyService() {
    }
    Object.defineProperty(AbpMultiTenancyService.prototype, "isEnabled", {
        get: function () {
            return abp.multiTenancy.isEnabled;
        },
        enumerable: true,
        configurable: true
    });
    AbpMultiTenancyService.ɵprov = ɵɵdefineInjectable({ factory: function AbpMultiTenancyService_Factory() { return new AbpMultiTenancyService(); }, token: AbpMultiTenancyService, providedIn: "root" });
    AbpMultiTenancyService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], AbpMultiTenancyService);
    return AbpMultiTenancyService;
}());

var NotifyService = /** @class */ (function () {
    function NotifyService() {
    }
    NotifyService.prototype.info = function (message, title, options) {
        abp.notify.info(message, title, options);
    };
    NotifyService.prototype.success = function (message, title, options) {
        abp.notify.success(message, title, options);
    };
    NotifyService.prototype.warn = function (message, title, options) {
        abp.notify.warn(message, title, options);
    };
    NotifyService.prototype.error = function (message, title, options) {
        abp.notify.error(message, title, options);
    };
    NotifyService.ɵprov = ɵɵdefineInjectable({ factory: function NotifyService_Factory() { return new NotifyService(); }, token: NotifyService, providedIn: "root" });
    NotifyService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], NotifyService);
    return NotifyService;
}());

var AbpSessionService = /** @class */ (function () {
    function AbpSessionService() {
    }
    Object.defineProperty(AbpSessionService.prototype, "userId", {
        get: function () {
            return abp.session.userId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbpSessionService.prototype, "tenantId", {
        get: function () {
            return abp.session.tenantId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbpSessionService.prototype, "impersonatorUserId", {
        get: function () {
            return abp.session.impersonatorUserId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbpSessionService.prototype, "impersonatorTenantId", {
        get: function () {
            return abp.session.impersonatorTenantId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbpSessionService.prototype, "multiTenancySide", {
        get: function () {
            return abp.session.multiTenancySide;
        },
        enumerable: true,
        configurable: true
    });
    AbpSessionService.ɵprov = ɵɵdefineInjectable({ factory: function AbpSessionService_Factory() { return new AbpSessionService(); }, token: AbpSessionService, providedIn: "root" });
    AbpSessionService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], AbpSessionService);
    return AbpSessionService;
}());

var SettingService = /** @class */ (function () {
    function SettingService() {
    }
    SettingService.prototype.get = function (name) {
        return abp.setting.get(name);
    };
    SettingService.prototype.getBoolean = function (name) {
        return abp.setting.getBoolean(name);
    };
    SettingService.prototype.getInt = function (name) {
        return abp.setting.getInt(name);
    };
    SettingService.ɵprov = ɵɵdefineInjectable({ factory: function SettingService_Factory() { return new SettingService(); }, token: SettingService, providedIn: "root" });
    SettingService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], SettingService);
    return SettingService;
}());

var UtilsService = /** @class */ (function () {
    function UtilsService() {
    }
    UtilsService.prototype.getCookieValue = function (key) {
        return abp.utils.getCookieValue(key);
    };
    UtilsService.prototype.setCookieValue = function (key, value, expireDate, path, domain, attributes) {
        abp.utils.setCookieValue(key, value, expireDate, path, domain, attributes);
    };
    UtilsService.prototype.deleteCookie = function (key, path) {
        abp.utils.deleteCookie(key, path);
    };
    UtilsService.ɵprov = ɵɵdefineInjectable({ factory: function UtilsService_Factory() { return new UtilsService(); }, token: UtilsService, providedIn: "root" });
    UtilsService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], UtilsService);
    return UtilsService;
}());

var AbpUserConfigurationService = /** @class */ (function () {
    function AbpUserConfigurationService(_http) {
        this._http = _http;
    }
    AbpUserConfigurationService.prototype.initialize = function () {
        this._http.get('/AbpUserConfiguration/GetAll')
            .subscribe(function (result) {
            jQuery.extend(true, abp, JSON.parse(JSON.stringify(result)));
        });
    };
    AbpUserConfigurationService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    AbpUserConfigurationService.ɵprov = ɵɵdefineInjectable({ factory: function AbpUserConfigurationService_Factory() { return new AbpUserConfigurationService(ɵɵinject(HttpClient)); }, token: AbpUserConfigurationService, providedIn: "root" });
    AbpUserConfigurationService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], AbpUserConfigurationService);
    return AbpUserConfigurationService;
}());

var AbpHttpConfigurationService = /** @class */ (function () {
    function AbpHttpConfigurationService(_messageService, _logService) {
        this._messageService = _messageService;
        this._logService = _logService;
        this.defaultError = {
            message: 'An error has occurred!',
            details: 'Error details were not sent by server.'
        };
        this.defaultError401 = {
            message: 'You are not authenticated!',
            details: 'You should be authenticated (sign in) in order to perform this operation.'
        };
        this.defaultError403 = {
            message: 'You are not authorized!',
            details: 'You are not allowed to perform this operation.'
        };
        this.defaultError404 = {
            message: 'Resource not found!',
            details: 'The resource requested could not be found on the server.'
        };
    }
    AbpHttpConfigurationService.prototype.logError = function (error) {
        this._logService.error(error);
    };
    AbpHttpConfigurationService.prototype.showError = function (error) {
        if (error.details) {
            return this._messageService.error(error.details, error.message || this.defaultError.message);
        }
        else {
            return this._messageService.error(error.message || this.defaultError.message);
        }
    };
    AbpHttpConfigurationService.prototype.handleTargetUrl = function (targetUrl) {
        if (!targetUrl) {
            location.href = '/';
        }
        else {
            location.href = targetUrl;
        }
    };
    AbpHttpConfigurationService.prototype.handleUnAuthorizedRequest = function (messagePromise, targetUrl) {
        var _this = this;
        var self = this;
        if (messagePromise) {
            messagePromise.done(function () {
                _this.handleTargetUrl(targetUrl || '/');
            });
        }
        else {
            self.handleTargetUrl(targetUrl || '/');
        }
    };
    AbpHttpConfigurationService.prototype.handleNonAbpErrorResponse = function (response) {
        var self = this;
        switch (response.status) {
            case 401:
                self.handleUnAuthorizedRequest(self.showError(self.defaultError401), '/');
                break;
            case 403:
                self.showError(self.defaultError403);
                break;
            case 404:
                self.showError(self.defaultError404);
                break;
            default:
                self.showError(self.defaultError);
                break;
        }
    };
    AbpHttpConfigurationService.prototype.handleAbpResponse = function (response, ajaxResponse) {
        var newResponse;
        if (ajaxResponse.success) {
            newResponse = response.clone({
                body: ajaxResponse.result
            });
            if (ajaxResponse.targetUrl) {
                this.handleTargetUrl(ajaxResponse.targetUrl);
                ;
            }
        }
        else {
            newResponse = response.clone({
                body: ajaxResponse.result
            });
            if (!ajaxResponse.error) {
                ajaxResponse.error = this.defaultError;
            }
            this.logError(ajaxResponse.error);
            this.showError(ajaxResponse.error);
            if (response.status === 401) {
                this.handleUnAuthorizedRequest(null, ajaxResponse.targetUrl);
            }
        }
        return newResponse;
    };
    AbpHttpConfigurationService.prototype.getAbpAjaxResponseOrNull = function (response) {
        if (!response || !response.headers) {
            return null;
        }
        var contentType = response.headers.get('Content-Type');
        if (!contentType) {
            this._logService.warn('Content-Type is not sent!');
            return null;
        }
        if (contentType.indexOf("application/json") < 0) {
            this._logService.warn('Content-Type is not application/json: ' + contentType);
            return null;
        }
        var responseObj = JSON.parse(JSON.stringify(response.body));
        if (!responseObj.__abp) {
            return null;
        }
        return responseObj;
    };
    AbpHttpConfigurationService.prototype.handleResponse = function (response) {
        var ajaxResponse = this.getAbpAjaxResponseOrNull(response);
        if (ajaxResponse == null) {
            return response;
        }
        return this.handleAbpResponse(response, ajaxResponse);
    };
    AbpHttpConfigurationService.prototype.blobToText = function (blob) {
        return new Observable(function (observer) {
            if (!blob) {
                observer.next("");
                observer.complete();
            }
            else {
                var reader = new FileReader();
                reader.onload = function () {
                    observer.next(this.result);
                    observer.complete();
                };
                reader.readAsText(blob);
            }
        });
    };
    AbpHttpConfigurationService.ctorParameters = function () { return [
        { type: MessageService },
        { type: LogService }
    ]; };
    AbpHttpConfigurationService.ɵprov = ɵɵdefineInjectable({ factory: function AbpHttpConfigurationService_Factory() { return new AbpHttpConfigurationService(ɵɵinject(MessageService), ɵɵinject(LogService)); }, token: AbpHttpConfigurationService, providedIn: "root" });
    AbpHttpConfigurationService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], AbpHttpConfigurationService);
    return AbpHttpConfigurationService;
}());

var RefreshTokenService = /** @class */ (function () {
    function RefreshTokenService() {
    }
    RefreshTokenService = __decorate([
        Injectable()
    ], RefreshTokenService);
    return RefreshTokenService;
}());

var AbpHttpInterceptor = /** @class */ (function () {
    function AbpHttpInterceptor(configuration, _injector) {
        this._injector = _injector;
        this._tokenService = new TokenService();
        this._utilsService = new UtilsService();
        this._logService = new LogService();
        this.isRefreshing = false;
        this.refreshTokenSubject = new BehaviorSubject(null);
        this.configuration = configuration;
    }
    AbpHttpInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        var modifiedRequest = this.normalizeRequestHeaders(request);
        return next.handle(modifiedRequest)
            .pipe(catchError(function (error) {
            if (error instanceof HttpErrorResponse && error.status === 401) {
                return _this.tryAuthWithRefreshToken(request, next, error);
            }
            else {
                return _this.handleErrorResponse(error);
            }
        }), switchMap(function (event) {
            return _this.handleSuccessResponse(event);
        }));
    };
    AbpHttpInterceptor.prototype.tryGetRefreshTokenService = function () {
        var _refreshTokenService = this._injector.get(RefreshTokenService, null);
        if (_refreshTokenService) {
            return _refreshTokenService.tryAuthWithRefreshToken();
        }
        return of(false);
    };
    AbpHttpInterceptor.prototype.tryAuthWithRefreshToken = function (request, next, error) {
        var _this = this;
        if (!this.isRefreshing) {
            this.isRefreshing = true;
            this.refreshTokenSubject.next(null);
            return this.tryGetRefreshTokenService().pipe(switchMap(function (authResult) {
                _this.isRefreshing = false;
                if (authResult) {
                    _this.refreshTokenSubject.next(authResult);
                    var modifiedRequest = _this.normalizeRequestHeaders(request);
                    return next.handle(modifiedRequest);
                }
                else {
                    return _this.handleErrorResponse(error);
                }
            }));
        }
        else {
            return this.refreshTokenSubject.pipe(filter(function (authResult) { return authResult != null; }), take(1), switchMap(function (authResult) {
                var modifiedRequest = _this.normalizeRequestHeaders(request);
                return next.handle(modifiedRequest);
            }));
        }
    };
    AbpHttpInterceptor.prototype.normalizeRequestHeaders = function (request) {
        var modifiedHeaders = new HttpHeaders();
        modifiedHeaders = request.headers.set("Pragma", "no-cache")
            .set("Cache-Control", "no-cache")
            .set("Expires", "Sat, 01 Jan 2000 00:00:00 GMT");
        modifiedHeaders = this.addXRequestedWithHeader(modifiedHeaders);
        modifiedHeaders = this.addAuthorizationHeaders(modifiedHeaders);
        modifiedHeaders = this.addAspNetCoreCultureHeader(modifiedHeaders);
        modifiedHeaders = this.addAcceptLanguageHeader(modifiedHeaders);
        modifiedHeaders = this.addTenantIdHeader(modifiedHeaders);
        return request.clone({
            headers: modifiedHeaders
        });
    };
    AbpHttpInterceptor.prototype.addXRequestedWithHeader = function (headers) {
        if (headers) {
            headers = headers.set('X-Requested-With', 'XMLHttpRequest');
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.addAspNetCoreCultureHeader = function (headers) {
        var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && headers && !headers.has('.AspNetCore.Culture')) {
            headers = headers.set('.AspNetCore.Culture', cookieLangValue);
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.addAcceptLanguageHeader = function (headers) {
        var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && headers && !headers.has('Accept-Language')) {
            headers = headers.set('Accept-Language', cookieLangValue);
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.addTenantIdHeader = function (headers) {
        var cookieTenantIdValue = this._utilsService.getCookieValue(abp.multiTenancy.tenantIdCookieName);
        if (cookieTenantIdValue && headers && !headers.has(abp.multiTenancy.tenantIdCookieName)) {
            headers = headers.set(abp.multiTenancy.tenantIdCookieName, cookieTenantIdValue);
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.addAuthorizationHeaders = function (headers) {
        var authorizationHeaders = headers ? headers.getAll('Authorization') : null;
        if (!authorizationHeaders) {
            authorizationHeaders = [];
        }
        if (!this.itemExists(authorizationHeaders, function (item) { return item.indexOf('Bearer ') == 0; })) {
            var token = this._tokenService.getToken();
            if (headers && token) {
                headers = headers.set('Authorization', 'Bearer ' + token);
            }
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.handleSuccessResponse = function (event) {
        var self = this;
        if (event instanceof HttpResponse) {
            if (event.body instanceof Blob && event.body.type && event.body.type.indexOf("application/json") >= 0) {
                return self.configuration.blobToText(event.body).pipe(map(function (json) {
                    var responseBody = json == "null" ? {} : JSON.parse(json);
                    var modifiedResponse = self.configuration.handleResponse(event.clone({
                        body: responseBody
                    }));
                    return modifiedResponse.clone({
                        body: new Blob([JSON.stringify(modifiedResponse.body)], { type: 'application/json' })
                    });
                }));
            }
        }
        return of(event);
    };
    AbpHttpInterceptor.prototype.handleErrorResponse = function (error) {
        var _this = this;
        if (!(error.error instanceof Blob)) {
            return throwError(error);
        }
        return this.configuration.blobToText(error.error).pipe(switchMap(function (json) {
            var errorBody = (json == "" || json == "null") ? {} : JSON.parse(json);
            var errorResponse = new HttpResponse({
                headers: error.headers,
                status: error.status,
                body: errorBody
            });
            var ajaxResponse = _this.configuration.getAbpAjaxResponseOrNull(errorResponse);
            if (ajaxResponse != null) {
                _this.configuration.handleAbpResponse(errorResponse, ajaxResponse);
            }
            else {
                _this.configuration.handleNonAbpErrorResponse(errorResponse);
            }
            return throwError(error);
        }));
    };
    AbpHttpInterceptor.prototype.itemExists = function (items, predicate) {
        for (var i = 0; i < items.length; i++) {
            if (predicate(items[i])) {
                return true;
            }
        }
        return false;
    };
    AbpHttpInterceptor.ctorParameters = function () { return [
        { type: AbpHttpConfigurationService },
        { type: Injector }
    ]; };
    AbpHttpInterceptor = __decorate([
        Injectable()
    ], AbpHttpInterceptor);
    return AbpHttpInterceptor;
}());

/*
 * Public API Surface of abp-ng2-module
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AbpHttpConfigurationService, AbpHttpInterceptor, AbpModule, AbpMultiTenancyService, AbpSessionService, AbpUserConfigurationService, FeatureCheckerService, LocalizationService, LogService, MessageService, NotifyService, PermissionCheckerService, RefreshTokenService, SettingService, TokenService, UtilsService };
//# sourceMappingURL=abp-ng2-module.js.map
