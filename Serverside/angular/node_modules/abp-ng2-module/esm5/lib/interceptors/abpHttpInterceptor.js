import { __decorate } from "tslib";
import { Injectable, Injector } from '@angular/core';
import { of, BehaviorSubject } from 'rxjs';
import { LogService } from '../services/log/log.service';
import { TokenService } from '../services/auth/token.service';
import { UtilsService } from '../services/utils/utils.service';
import { HttpResponse, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { switchMap, filter, take, catchError, map } from 'rxjs/operators';
import { throwError } from 'rxjs/internal/observable/throwError';
import { AbpHttpConfigurationService } from './abp-http-configuration.service';
import { RefreshTokenService } from './refresh-token.service';
var AbpHttpInterceptor = /** @class */ (function () {
    function AbpHttpInterceptor(configuration, _injector) {
        this._injector = _injector;
        this._tokenService = new TokenService();
        this._utilsService = new UtilsService();
        this._logService = new LogService();
        this.isRefreshing = false;
        this.refreshTokenSubject = new BehaviorSubject(null);
        this.configuration = configuration;
    }
    AbpHttpInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        var modifiedRequest = this.normalizeRequestHeaders(request);
        return next.handle(modifiedRequest)
            .pipe(catchError(function (error) {
            if (error instanceof HttpErrorResponse && error.status === 401) {
                return _this.tryAuthWithRefreshToken(request, next, error);
            }
            else {
                return _this.handleErrorResponse(error);
            }
        }), switchMap(function (event) {
            return _this.handleSuccessResponse(event);
        }));
    };
    AbpHttpInterceptor.prototype.tryGetRefreshTokenService = function () {
        var _refreshTokenService = this._injector.get(RefreshTokenService, null);
        if (_refreshTokenService) {
            return _refreshTokenService.tryAuthWithRefreshToken();
        }
        return of(false);
    };
    AbpHttpInterceptor.prototype.tryAuthWithRefreshToken = function (request, next, error) {
        var _this = this;
        if (!this.isRefreshing) {
            this.isRefreshing = true;
            this.refreshTokenSubject.next(null);
            return this.tryGetRefreshTokenService().pipe(switchMap(function (authResult) {
                _this.isRefreshing = false;
                if (authResult) {
                    _this.refreshTokenSubject.next(authResult);
                    var modifiedRequest = _this.normalizeRequestHeaders(request);
                    return next.handle(modifiedRequest);
                }
                else {
                    return _this.handleErrorResponse(error);
                }
            }));
        }
        else {
            return this.refreshTokenSubject.pipe(filter(function (authResult) { return authResult != null; }), take(1), switchMap(function (authResult) {
                var modifiedRequest = _this.normalizeRequestHeaders(request);
                return next.handle(modifiedRequest);
            }));
        }
    };
    AbpHttpInterceptor.prototype.normalizeRequestHeaders = function (request) {
        var modifiedHeaders = new HttpHeaders();
        modifiedHeaders = request.headers.set("Pragma", "no-cache")
            .set("Cache-Control", "no-cache")
            .set("Expires", "Sat, 01 Jan 2000 00:00:00 GMT");
        modifiedHeaders = this.addXRequestedWithHeader(modifiedHeaders);
        modifiedHeaders = this.addAuthorizationHeaders(modifiedHeaders);
        modifiedHeaders = this.addAspNetCoreCultureHeader(modifiedHeaders);
        modifiedHeaders = this.addAcceptLanguageHeader(modifiedHeaders);
        modifiedHeaders = this.addTenantIdHeader(modifiedHeaders);
        return request.clone({
            headers: modifiedHeaders
        });
    };
    AbpHttpInterceptor.prototype.addXRequestedWithHeader = function (headers) {
        if (headers) {
            headers = headers.set('X-Requested-With', 'XMLHttpRequest');
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.addAspNetCoreCultureHeader = function (headers) {
        var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && headers && !headers.has('.AspNetCore.Culture')) {
            headers = headers.set('.AspNetCore.Culture', cookieLangValue);
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.addAcceptLanguageHeader = function (headers) {
        var cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && headers && !headers.has('Accept-Language')) {
            headers = headers.set('Accept-Language', cookieLangValue);
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.addTenantIdHeader = function (headers) {
        var cookieTenantIdValue = this._utilsService.getCookieValue(abp.multiTenancy.tenantIdCookieName);
        if (cookieTenantIdValue && headers && !headers.has(abp.multiTenancy.tenantIdCookieName)) {
            headers = headers.set(abp.multiTenancy.tenantIdCookieName, cookieTenantIdValue);
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.addAuthorizationHeaders = function (headers) {
        var authorizationHeaders = headers ? headers.getAll('Authorization') : null;
        if (!authorizationHeaders) {
            authorizationHeaders = [];
        }
        if (!this.itemExists(authorizationHeaders, function (item) { return item.indexOf('Bearer ') == 0; })) {
            var token = this._tokenService.getToken();
            if (headers && token) {
                headers = headers.set('Authorization', 'Bearer ' + token);
            }
        }
        return headers;
    };
    AbpHttpInterceptor.prototype.handleSuccessResponse = function (event) {
        var self = this;
        if (event instanceof HttpResponse) {
            if (event.body instanceof Blob && event.body.type && event.body.type.indexOf("application/json") >= 0) {
                return self.configuration.blobToText(event.body).pipe(map(function (json) {
                    var responseBody = json == "null" ? {} : JSON.parse(json);
                    var modifiedResponse = self.configuration.handleResponse(event.clone({
                        body: responseBody
                    }));
                    return modifiedResponse.clone({
                        body: new Blob([JSON.stringify(modifiedResponse.body)], { type: 'application/json' })
                    });
                }));
            }
        }
        return of(event);
    };
    AbpHttpInterceptor.prototype.handleErrorResponse = function (error) {
        var _this = this;
        if (!(error.error instanceof Blob)) {
            return throwError(error);
        }
        return this.configuration.blobToText(error.error).pipe(switchMap(function (json) {
            var errorBody = (json == "" || json == "null") ? {} : JSON.parse(json);
            var errorResponse = new HttpResponse({
                headers: error.headers,
                status: error.status,
                body: errorBody
            });
            var ajaxResponse = _this.configuration.getAbpAjaxResponseOrNull(errorResponse);
            if (ajaxResponse != null) {
                _this.configuration.handleAbpResponse(errorResponse, ajaxResponse);
            }
            else {
                _this.configuration.handleNonAbpErrorResponse(errorResponse);
            }
            return throwError(error);
        }));
    };
    AbpHttpInterceptor.prototype.itemExists = function (items, predicate) {
        for (var i = 0; i < items.length; i++) {
            if (predicate(items[i])) {
                return true;
            }
        }
        return false;
    };
    AbpHttpInterceptor.ctorParameters = function () { return [
        { type: AbpHttpConfigurationService },
        { type: Injector }
    ]; };
    AbpHttpInterceptor = __decorate([
        Injectable()
    ], AbpHttpInterceptor);
    return AbpHttpInterceptor;
}());
export { AbpHttpInterceptor };
//# sourceMappingURL=data:application/json;base64,